{
    "title": "Amazon GameLift",
    "description": "Amazon GameLift Service  Amazon GameLift is a managed service for developers who\nneed a scalable, dedicated server solution for their multiplayer games. Use\nAmazon GameLift for these tasks: (1) set up computing resources and deploy your\ngame servers, (2) run game sessions and get players into games, (3)\nautomatically scale your resources to meet player demand and manage costs, and\n(4) track in-depth metrics on game server performance and player usage.\n\nThe Amazon GameLift service API includes two important function sets:\n\n *   Manage game sessions and player access -- Retrieve information on available\n   game sessions; create new game sessions; send player requests to join a game\n   session.\n   \n   \n *   Configure and manage game server resources -- Manage builds, fleets, queues,\n   and aliases; set auto-scaling policies; retrieve logs and metrics.\n   \n   \n\nThis reference guide describes the low-level service API for Amazon GameLift.\nYou can use the API functionality with these tools: \n\n *  The Amazon Web Services software development kit (AWS SDK\n   [http://aws.amazon.com/tools/#sdk]) is available in multiple languages\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-supported.html#gamelift-supported-clients] \n   including C++ and C#. Use the SDK to access the API programmatically from an\n   application, such as a game client.\n   \n   \n *  The AWS command-line interface\n   [https://docs.aws.amazon.com/cli/latest/userguide/] (CLI) tool is primarily\n   useful for handling administrative actions, such as setting up and managing\n   Amazon GameLift settings and resources. You can use the AWS CLI to manage all\n   of your AWS services.\n   \n   \n *  The AWS Management Console [https://console.aws.amazon.com/gamelift/home] for\n   Amazon GameLift provides a web interface to manage your Amazon GameLift\n   settings and resources. The console includes a dashboard for tracking key\n   resources, including builds and fleets, and displays usage and performance\n   metrics for your games as customizable graphs.\n   \n   \n *  Amazon GameLift Local is a tool for testing your game's integration with\n   Amazon GameLift before deploying it on the service. This tools supports a\n   subset of key API actions, which can be called from either the AWS CLI or\n   programmatically. See Testing an Integration\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/integration-testing-local.html]\n   .\n   \n   \n\n Learn more \n\n *   Developer Guide\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/] -- Read about\n   Amazon GameLift features and how to use them. \n   \n   \n *   Tutorials [https://gamedev.amazon.com/forums/tutorials] -- Get started fast\n   with walkthroughs and sample projects.\n   \n   \n *   GameDev Blog [https://gamedev.amazon.com/blogs/gamedev/] -- Stay up to date\n   with new features and techniques.\n   \n   \n *   GameDev Forums\n   [https://gamedev.amazon.com/forums/spaces/123/gamelift-discussion.html] --\n   Connect with the GameDev community.\n   \n   \n *   Release notes [https://aws.amazon.com/releasenotes/Amazon-GameLift/] and \n   document history\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/doc-history.html] \n   -- Stay current with updates to the Amazon GameLift service, SDKs, and\n   documentation. \n   \n   \n\n API SUMMARY \n\nThis list offers a functional overview of the Amazon GameLift service API.\n\n Managing Games and Players \n\nUse these actions to start new game sessions, find existing game sessions, track\ngame session status and other information, and enable player access to game\nsessions.\n\n *   Discover existing game sessions \n   \n    *   SearchGameSessions -- Retrieve all available game sessions or search for\n      game sessions that match a set of criteria. \n      \n      \n   \n   \n *   Start new game sessions \n   \n    *  Start new games with Queues to find the best available hosting resources\n      across multiple regions, minimize player latency, and balance game session\n      activity for efficiency and cost effectiveness. \n      \n       *   StartGameSessionPlacement -- Request a new game session placement and\n         add one or more players to it.\n         \n         \n       *   DescribeGameSessionPlacement -- Get details on a placement request,\n         including status.\n         \n         \n       *   StopGameSessionPlacement -- Cancel a placement request. \n         \n         \n      \n      \n    *   CreateGameSession -- Start a new game session on a specific fleet. \n      Available in Amazon GameLift Local. \n      \n      \n   \n   \n *   Match players to game sessions with FlexMatch matchmaking \n   \n    *   StartMatchmaking -- Request matchmaking for one players or a group who\n      want to play together. \n      \n      \n    *   StartMatchBackfill - Request additional player matches to fill empty\n      slots in an existing game session. \n      \n      \n    *   DescribeMatchmaking -- Get details on a matchmaking request, including\n      status.\n      \n      \n    *   AcceptMatch -- Register that a player accepts a proposed match, for\n      matches that require player acceptance. \n      \n      \n    *   StopMatchmaking -- Cancel a matchmaking request. \n      \n      \n   \n   \n *   Manage game session data \n   \n    *   DescribeGameSessions -- Retrieve metadata for one or more game sessions,\n      including length of time active and current player count. Available in\n      Amazon GameLift Local. \n      \n      \n    *   DescribeGameSessionDetails -- Retrieve metadata and the game session\n      protection setting for one or more game sessions.\n      \n      \n    *   UpdateGameSession -- Change game session settings, such as maximum player\n      count and join policy.\n      \n      \n    *   GetGameSessionLogUrl -- Get the location of saved logs for a game\n      session.\n      \n      \n   \n   \n *   Manage player sessions \n   \n    *   CreatePlayerSession -- Send a request for a player to join a game\n      session. Available in Amazon GameLift Local. \n      \n      \n    *   CreatePlayerSessions -- Send a request for multiple players to join a\n      game session. Available in Amazon GameLift Local. \n      \n      \n    *   DescribePlayerSessions -- Get details on player activity, including\n      status, playing time, and player data. Available in Amazon GameLift Local. \n       \n      \n      \n   \n   \n\n Setting Up and Managing Game Servers \n\nWhen setting up Amazon GameLift resources for your game, you first create a game\nbuild\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-build-intro.html] \nand upload it to Amazon GameLift. You can then use these actions to configure\nand manage a fleet of resources to run your game servers, scale capacity to meet\nplayer demand, access performance and utilization metrics, and more.\n\n *   Manage game builds \n   \n    *   CreateBuild -- Create a new build using files stored in an Amazon S3\n      bucket. To create a build and upload files from a local path, use the AWS\n      CLI command upload-build.\n      \n      \n    *   ListBuilds -- Get a list of all builds uploaded to a Amazon GameLift\n      region.\n      \n      \n    *   DescribeBuild -- Retrieve information associated with a build.\n      \n      \n    *   UpdateBuild -- Change build metadata, including build name and version.\n      \n      \n    *   DeleteBuild -- Remove a build from Amazon GameLift.\n      \n      \n   \n   \n *   Manage fleets \n   \n    *   CreateFleet -- Configure and activate a new fleet to run a build's game\n      servers.\n      \n      \n    *   ListFleets -- Get a list of all fleet IDs in a Amazon GameLift region\n      (all statuses).\n      \n      \n    *   DeleteFleet -- Terminate a fleet that is no longer running game servers\n      or hosting players.\n      \n      \n    *  View / update fleet configurations.\n      \n       *   DescribeFleetAttributes / UpdateFleetAttributes -- View or change a\n         fleet's metadata and settings for game session protection and resource\n         creation limits.\n         \n         \n       *   DescribeFleetPortSettings / UpdateFleetPortSettings -- View or change\n         the inbound permissions (IP address and port setting ranges) allowed\n         for a fleet.\n         \n         \n       *   DescribeRuntimeConfiguration / UpdateRuntimeConfiguration -- View or\n         change what server processes (and how many) to run on each instance in\n         a fleet.\n         \n         \n      \n      \n   \n   \n *   Control fleet capacity \n   \n    *   DescribeEC2InstanceLimits -- Retrieve maximum number of instances allowed\n      for the current AWS account and the current usage level.\n      \n      \n    *   DescribeFleetCapacity / UpdateFleetCapacity -- Retrieve the capacity\n      settings and the current number of instances in a fleet; adjust fleet\n      capacity settings to scale up or down.\n      \n      \n    *  Autoscale -- Manage auto-scaling rules and apply them to a fleet.\n      \n       *   PutScalingPolicy -- Create a new auto-scaling policy, or update an\n         existing one.\n         \n         \n       *   DescribeScalingPolicies -- Retrieve an existing auto-scaling policy.\n         \n         \n       *   DeleteScalingPolicy -- Delete an auto-scaling policy and stop it from\n         affecting a fleet's capacity.\n         \n         \n       *   StartFleetActions -- Restart a fleet's auto-scaling policies.\n         \n         \n       *   StopFleetActions -- Suspend a fleet's auto-scaling policies.\n         \n         \n      \n      \n   \n   \n *   Manage game session queues \n   \n    *   CreateGameSessionQueue -- Create a queue for processing requests for new\n      game sessions. \n      \n      \n    *   DescribeGameSessionQueues -- Retrieve game session queues defined in a\n      Amazon GameLift region.\n      \n      \n    *   UpdateGameSessionQueue -- Change the configuration of a game session\n      queue.\n      \n      \n    *   DeleteGameSessionQueue -- Remove a game session queue from the region.\n      \n      \n   \n   \n *   Manage FlexMatch resources \n   \n    *   CreateMatchmakingConfiguration -- Create a matchmaking configuration with\n      instructions for building a player group and placing in a new game\n      session. \n      \n      \n    *   DescribeMatchmakingConfigurations -- Retrieve matchmaking configurations\n      defined a Amazon GameLift region.\n      \n      \n    *   UpdateMatchmakingConfiguration -- Change settings for matchmaking\n      configuration. queue.\n      \n      \n    *   DeleteMatchmakingConfiguration -- Remove a matchmaking configuration from\n      the region.\n      \n      \n    *   CreateMatchmakingRuleSet -- Create a set of rules to use when searching\n      for player matches. \n      \n      \n    *   DescribeMatchmakingRuleSets -- Retrieve matchmaking rule sets defined in\n      a Amazon GameLift region.\n      \n      \n    *   ValidateMatchmakingRuleSet -- Verify syntax for a set of matchmaking\n      rules. \n      \n      \n    *   DeleteMatchmakingRuleSet -- Remove a matchmaking rule set from the\n      region.\n      \n      \n   \n   \n *   Access fleet activity statistics \n   \n    *   DescribeFleetUtilization -- Get current data on the number of server\n      processes, game sessions, and players currently active on a fleet.\n      \n      \n    *   DescribeFleetEvents -- Get a fleet's logged events for a specified time\n      span.\n      \n      \n    *   DescribeGameSessions -- Retrieve metadata associated with one or more\n      game sessions, including length of time active and current player count.\n      \n      \n   \n   \n *   Remotely access an instance \n   \n    *   DescribeInstances -- Get information on each instance in a fleet,\n      including instance ID, IP address, and status.\n      \n      \n    *   GetInstanceAccess -- Request access credentials needed to remotely\n      connect to a specified instance in a fleet.\n      \n      \n   \n   \n *   Manage fleet aliases \n   \n    *   CreateAlias -- Define a new alias and optionally assign it to a fleet.\n      \n      \n    *   ListAliases -- Get all fleet aliases defined in a Amazon GameLift region.\n      \n      \n    *   DescribeAlias -- Retrieve information on an existing alias.\n      \n      \n    *   UpdateAlias -- Change settings for a alias, such as redirecting it from\n      one fleet to another.\n      \n      \n    *   DeleteAlias -- Remove an alias from the region.\n      \n      \n    *   ResolveAlias -- Get the fleet ID that a specified alias points to.\n      \n      \n   \n   \n *   Manage VPC peering connections for fleets \n   \n    *   CreateVpcPeeringAuthorization -- Authorize a peering connection to one of\n      your VPCs.\n      \n      \n    *   DescribeVpcPeeringAuthorizations -- Retrieve valid peering connection\n      authorizations. \n      \n      \n    *   DeleteVpcPeeringAuthorization -- Delete a peering connection\n      authorization.\n      \n      \n    *   CreateVpcPeeringConnection -- Establish a peering connection between the\n      VPC for a Amazon GameLift fleet and one of your VPCs.\n      \n      \n    *   DescribeVpcPeeringConnections -- Retrieve information on active or\n      pending VPC peering connections with a Amazon GameLift fleet.\n      \n      \n    *   DeleteVpcPeeringConnection -- Delete a VPC peering connection with a\n      Amazon GameLift fleet.",
    "docsUrl": "https://aws.amazon.com/gamelift/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/gamelift/2015-10-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://gamelift.amazonaws.com/",
                    "http://gamelift.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AcceptMatch": {
            "main": "./lib/actions/AcceptMatch.js",
            "title": "AcceptMatch",
            "description": "Registers a player's acceptance or rejection of a proposed FlexMatch match. A\nmatchmaking configuration may require player acceptance; if so, then matches\nbuilt with that configuration cannot be completed unless all players accept the\nproposed match within a specified time limit. \n\nWhen FlexMatch builds a match, all the matchmaking tickets involved in the\nproposed match are placed into status REQUIRES_ACCEPTANCE. This is a trigger for\nyour game to get acceptance from all players in the ticket. Acceptances are only\nvalid for tickets when they are in this status; all other acceptances result in\nan error.\n\nTo register acceptance, specify the ticket ID, a response, and one or more\nplayers. Once all players have registered acceptance, the matchmaking tickets\nadvance to status PLACING, where a new game session is created for the match. \n\nIf any player rejects the match, or if acceptances are not received before a\nspecified timeout, the proposed match is dropped. The matchmaking tickets are\nthen handled in one of two ways: For tickets where all players accepted the\nmatch, the ticket status is returned to SEARCHING to find a new match. For\ntickets where one or more players failed to accept the match, the ticket status\nis set to FAILED, and processing is terminated. A new matchmaking request for\nthese players can be submitted as needed. \n\n *   StartMatchmaking \n   \n   \n *   DescribeMatchmaking \n   \n   \n *   StopMatchmaking \n   \n   \n *   AcceptMatch \n   \n   \n *   StartMatchBackfill",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AcceptMatch.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateAlias": {
            "main": "./lib/actions/CreateAlias.js",
            "title": "CreateAlias",
            "description": "Creates an alias for a fleet. In most situations, you can use an alias ID in\nplace of a fleet ID. By using a fleet alias instead of a specific fleet ID, you\ncan switch gameplay and players to a new fleet without changing your game client\nor other game components. For example, for games in production, using an alias\nallows you to seamlessly redirect your player base to a new game server update. \n\nAmazon GameLift supports two types of routing strategies for aliases: simple and\nterminal. A simple alias points to an active fleet. A terminal alias is used to\ndisplay messaging or link to a URL instead of routing players to an active\nfleet. For example, you might use a terminal alias when a game version is no\nlonger supported and you want to direct players to an upgrade site. \n\nTo create a fleet alias, specify an alias name, routing strategy, and optional\ndescription. Each simple alias can point to only one fleet, but a fleet can have\nmultiple aliases. If successful, a new alias record is returned, including an\nalias ID, which you can reference when creating a game session. You can reassign\nan alias to another fleet by calling UpdateAlias.\n\n *   CreateAlias \n   \n   \n *   ListAliases \n   \n   \n *   DescribeAlias \n   \n   \n *   UpdateAlias \n   \n   \n *   DeleteAlias \n   \n   \n *   ResolveAlias",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateBuild": {
            "main": "./lib/actions/CreateBuild.js",
            "title": "CreateBuild",
            "description": "Creates a new Amazon GameLift build record for your game server binary files and\npoints to the location of your game server build files in an Amazon Simple\nStorage Service (Amazon S3) location. \n\nGame server binaries must be combined into a .zip file for use with Amazon\nGameLift. \n\nTo create new builds quickly and easily, use the AWS CLI command upload-build\n[https://docs.aws.amazon.com/cli/latest/reference/gamelift/upload-build.html] .\nThis helper command uploads your build and creates a new build record in one\nstep, and automatically handles the necessary permissions. \n\nThe CreateBuild operation should be used only when you need to manually upload\nyour build files, as in the following scenarios:\n\n *  Store a build file in an Amazon S3 bucket under your own AWS account. To use\n   this option, you must first give Amazon GameLift access to that Amazon S3\n   bucket. To create a new build record using files in your Amazon S3 bucket,\n   call CreateBuild and specify a build name, operating system, and the storage\n   location of your game build.\n   \n   \n *  Upload a build file directly to Amazon GameLift's Amazon S3 account. To use\n   this option, you first call CreateBuild with a build name and operating\n   system. This action creates a new build record and returns an Amazon S3\n   storage location (bucket and key only) and temporary access credentials. Use\n   the credentials to manually upload your build file to the storage location\n   (see the Amazon S3 topic Uploading Objects\n   [https://docs.aws.amazon.com/AmazonS3/latest/dev/UploadingObjects.html]). You\n   can upload files to a location only once. \n   \n   \n\nIf successful, this operation creates a new build record with a unique build ID\nand places it in INITIALIZED status. You can use DescribeBuild to check the\nstatus of your build. A build must be in READY status before it can be used to\ncreate fleets.\n\n Learn more \n\n Uploading Your Game\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-build-intro.html] \n \n\n Create a Build with Files in Amazon S3\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-build-cli-uploading.html#gamelift-build-cli-uploading-create-build] \n \n\n Related operations \n\n *   CreateBuild \n   \n   \n *   ListBuilds \n   \n   \n *   DescribeBuild \n   \n   \n *   UpdateBuild \n   \n   \n *   DeleteBuild",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateBuild.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateFleet": {
            "main": "./lib/actions/CreateFleet.js",
            "title": "CreateFleet",
            "description": "Creates a new fleet to run your game servers. A fleet is a set of Amazon Elastic\nCompute Cloud (Amazon EC2) instances, each of which can run multiple server\nprocesses to host game sessions. You set up a fleet to use instances with\ncertain hardware specifications (see Amazon EC2 Instance Types\n[http://aws.amazon.com/ec2/instance-types/]), and deploy your game build to the\nfleet. \n\nTo create a new fleet, you must provide the following: (1) a fleet name, (2) an\nEC2 instance type, (3) the build ID for your game build, and (4) a run-time\nconfiguration, which specifies the server processes to run on each instance in\nthe fleet. If fleet type is not set, the new fleet will use on-demand instances\nby default.\n\nIf the CreateFleet call is successful, Amazon GameLift performs the following\ntasks. You can track the process of a fleet by checking the fleet status or by\nmonitoring fleet creation events:\n\n *  Creates a fleet record. Status: NEW.\n   \n   \n *  Begins writing events to the fleet event log, which can be accessed in the\n   Amazon GameLift console.\n   \n   Sets the fleet's target capacity to 1 (desired instances), which triggers\n   Amazon GameLift to start one new EC2 instance.\n   \n   \n *  Downloads the game build to the new instance and installs it. Statuses: \n   DOWNLOADING, VALIDATING, BUILDING. \n   \n   \n *  Starts launching server processes on the instance. If the fleet is\n   configured to run multiple server processes per instance, Amazon GameLift\n   staggers each launch by a few seconds. Status: ACTIVATING.\n   \n   \n *  Sets the fleet's status to ACTIVE as soon as one server process is ready to\n   host a game session.\n   \n   \n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateFleet.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateGameSession": {
            "main": "./lib/actions/CreateGameSession.js",
            "title": "CreateGameSession",
            "description": "Creates a multiplayer game session for players. This action creates a game\nsession record and assigns an available server process in the specified fleet to\nhost the game session. A fleet must have an ACTIVE status before a game session\ncan be created in it.\n\nTo create a game session, specify either fleet ID or alias ID and indicate a\nmaximum number of players to allow in the game session. You can also provide a\nname and game-specific properties for this game session. If successful, a \nGameSession object is returned containing the game session properties and other\nsettings you specified.\n\n Idempotency tokens. You can add a token that uniquely identifies game session\nrequests. This is useful for ensuring that game session requests are idempotent.\nMultiple requests with the same idempotency token are processed only once;\nsubsequent requests return the original result. All response values are the same\nwith the exception of game session status, which may change.\n\n Resource creation limits. If you are creating a game session on a fleet with a\nresource creation limit policy in force, then you must specify a creator ID.\nWithout this ID, Amazon GameLift has no way to evaluate the policy for this new\ngame session request.\n\n Player acceptance policy. By default, newly created game sessions are open to\nnew players. You can restrict new player access by using UpdateGameSession to\nchange the game session's player session creation policy.\n\n Game session logs. Logs are retained for all active game sessions for 14 days.\nTo access the logs, call GetGameSessionLogUrl to download the log files.\n\n Available in Amazon GameLift Local. \n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateGameSession.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateGameSessionQueue": {
            "main": "./lib/actions/CreateGameSessionQueue.js",
            "title": "CreateGameSessionQueue",
            "description": "Establishes a new queue for processing requests to place new game sessions. A\nqueue identifies where new game sessions can be hosted -- by specifying a list\nof destinations (fleets or aliases) -- and how long requests can wait in the\nqueue before timing out. You can set up a queue to try to place game sessions on\nfleets in multiple regions. To add placement requests to a queue, call \nStartGameSessionPlacement and reference the queue name.\n\n Destination order. When processing a request for a game session, Amazon\nGameLift tries each destination in order until it finds one with available\nresources to host the new game session. A queue's default order is determined by\nhow destinations are listed. The default order is overridden when a game session\nplacement request provides player latency information. Player latency\ninformation enables Amazon GameLift to prioritize destinations where players\nreport the lowest average latency, as a result placing the new game session\nwhere the majority of players will have the best possible gameplay experience.\n\n Player latency policies. For placement requests containing player latency\ninformation, use player latency policies to protect individual players from very\nhigh latencies. With a latency cap, even when a destination can deliver a low\nlatency for most players, the game is not placed where any individual player is\nreporting latency higher than a policy's maximum. A queue can have multiple\nlatency policies, which are enforced consecutively starting with the policy with\nthe lowest latency cap. Use multiple policies to gradually relax latency\ncontrols; for example, you might set a policy with a low latency cap for the\nfirst 60 seconds, a second policy with a higher cap for the next 60 seconds,\netc. \n\nTo create a new queue, provide a name, timeout value, a list of destinations\nand, if desired, a set of latency policies. If successful, a new queue object is\nreturned.\n\n *   CreateGameSessionQueue \n   \n   \n *   DescribeGameSessionQueues \n   \n   \n *   UpdateGameSessionQueue \n   \n   \n *   DeleteGameSessionQueue",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateGameSessionQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateMatchmakingConfiguration": {
            "main": "./lib/actions/CreateMatchmakingConfiguration.js",
            "title": "CreateMatchmakingConfiguration",
            "description": "Defines a new matchmaking configuration for use with FlexMatch. A matchmaking\nconfiguration sets out guidelines for matching players and getting the matches\ninto games. You can set up multiple matchmaking configurations to handle the\nscenarios needed for your game. Each matchmaking ticket (StartMatchmaking or \nStartMatchBackfill) specifies a configuration for the match and provides player\nattributes to support the configuration being used. \n\nTo create a matchmaking configuration, at a minimum you must specify the\nfollowing: configuration name; a rule set that governs how to evaluate players\nand find acceptable matches; a game session queue to use when placing a new game\nsession for the match; and the maximum time allowed for a matchmaking attempt.\n\n Player acceptance -- In each configuration, you have the option to require that\nall players accept participation in a proposed match. To enable this feature,\nset AcceptanceRequired to true and specify a time limit for player acceptance.\nPlayers have the option to accept or reject a proposed match, and a match does\nnot move ahead to game session placement unless all matched players accept. \n\n Matchmaking status notification -- There are two ways to track the progress of\nmatchmaking tickets: (1) polling ticket status with DescribeMatchmaking; or (2)\nreceiving notifications with Amazon Simple Notification Service (SNS). To use\nnotifications, you first need to set up an SNS topic to receive the\nnotifications, and provide the topic ARN in the matchmaking configuration (see \nSetting up Notifications for Matchmaking\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/match-notification.html]\n). Since notifications promise only \"best effort\" delivery, we recommend calling \nDescribeMatchmaking if no notifications are received within 30 seconds.\n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateMatchmakingConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateMatchmakingRuleSet": {
            "main": "./lib/actions/CreateMatchmakingRuleSet.js",
            "title": "CreateMatchmakingRuleSet",
            "description": "Creates a new rule set for FlexMatch matchmaking. A rule set describes the type\nof match to create, such as the number and size of teams, and sets the\nparameters for acceptable player matches, such as minimum skill level or\ncharacter type. A rule set is used by a MatchmakingConfiguration. \n\nTo create a matchmaking rule set, provide unique rule set name and the rule set\nbody in JSON format. Rule sets must be defined in the same region as the\nmatchmaking configuration they will be used with.\n\nSince matchmaking rule sets cannot be edited, it is a good idea to check the\nrule set syntax using ValidateMatchmakingRuleSet before creating a new rule set.\n\n Learn more \n\n *   Build a Rule Set\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/match-rulesets.html] \n    \n   \n   \n *   Design a Matchmaker\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/match-configuration.html] \n    \n   \n   \n *   Matchmaking with FlexMatch\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/match-intro.html] \n    \n   \n   \n\n Related operations \n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateMatchmakingRuleSet.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreatePlayerSession": {
            "main": "./lib/actions/CreatePlayerSession.js",
            "title": "CreatePlayerSession",
            "description": "Adds a player to a game session and creates a player session record. Before a\nplayer can be added, a game session must have an ACTIVE status, have a creation\npolicy of ALLOW_ALL, and have an open player slot. To add a group of players to\na game session, use CreatePlayerSessions.\n\nTo create a player session, specify a game session ID, player ID, and optionally\na string of player data. If successful, the player is added to the game session\nand a new PlayerSession object is returned. Player sessions cannot be updated. \n\n Available in Amazon GameLift Local. \n\n *   CreatePlayerSession \n   \n   \n *   CreatePlayerSessions \n   \n   \n *   DescribePlayerSessions \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreatePlayerSession.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreatePlayerSessions": {
            "main": "./lib/actions/CreatePlayerSessions.js",
            "title": "CreatePlayerSessions",
            "description": "Adds a group of players to a game session. This action is useful with a team\nmatching feature. Before players can be added, a game session must have an \nACTIVE status, have a creation policy of ALLOW_ALL, and have an open player\nslot. To add a single player to a game session, use CreatePlayerSession.\n\nTo create player sessions, specify a game session ID, a list of player IDs, and\noptionally a set of player data strings. If successful, the players are added to\nthe game session and a set of new PlayerSession objects is returned. Player\nsessions cannot be updated.\n\n Available in Amazon GameLift Local. \n\n *   CreatePlayerSession \n   \n   \n *   CreatePlayerSessions \n   \n   \n *   DescribePlayerSessions \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreatePlayerSessions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVpcPeeringAuthorization": {
            "main": "./lib/actions/CreateVpcPeeringAuthorization.js",
            "title": "CreateVpcPeeringAuthorization",
            "description": "Requests authorization to create or delete a peer connection between the VPC for\nyour Amazon GameLift fleet and a virtual private cloud (VPC) in your AWS\naccount. VPC peering enables the game servers on your fleet to communicate\ndirectly with other AWS resources. Once you've received authorization, call \nCreateVpcPeeringConnection to establish the peering connection. For more\ninformation, see VPC Peering with Amazon GameLift Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html].\n\nYou can peer with VPCs that are owned by any AWS account you have access to,\nincluding the account that you use to manage your Amazon GameLift fleets. You\ncannot peer with VPCs that are in different regions.\n\nTo request authorization to create a connection, call this operation from the\nAWS account with the VPC that you want to peer to your Amazon GameLift fleet.\nFor example, to enable your game servers to retrieve data from a DynamoDB table,\nuse the account that manages that DynamoDB resource. Identify the following\nvalues: (1) The ID of the VPC that you want to peer with, and (2) the ID of the\nAWS account that you use to manage Amazon GameLift. If successful, VPC peering\nis authorized for the specified VPC. \n\nTo request authorization to delete a connection, call this operation from the\nAWS account with the VPC that is peered with your Amazon GameLift fleet.\nIdentify the following values: (1) VPC ID that you want to delete the peering\nconnection for, and (2) ID of the AWS account that you use to manage Amazon\nGameLift. \n\nThe authorization remains valid for 24 hours unless it is canceled by a call to \nDeleteVpcPeeringAuthorization. You must create or delete the peering connection\nwhile the authorization is valid. \n\n *   CreateVpcPeeringAuthorization \n   \n   \n *   DescribeVpcPeeringAuthorizations \n   \n   \n *   DeleteVpcPeeringAuthorization \n   \n   \n *   CreateVpcPeeringConnection \n   \n   \n *   DescribeVpcPeeringConnections \n   \n   \n *   DeleteVpcPeeringConnection",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVpcPeeringAuthorization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVpcPeeringConnection": {
            "main": "./lib/actions/CreateVpcPeeringConnection.js",
            "title": "CreateVpcPeeringConnection",
            "description": "Establishes a VPC peering connection between a virtual private cloud (VPC) in an\nAWS account with the VPC for your Amazon GameLift fleet. VPC peering enables the\ngame servers on your fleet to communicate directly with other AWS resources. You\ncan peer with VPCs in any AWS account that you have access to, including the\naccount that you use to manage your Amazon GameLift fleets. You cannot peer with\nVPCs that are in different regions. For more information, see VPC Peering with\nAmazon GameLift Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html].\n\nBefore calling this operation to establish the peering connection, you first\nneed to call CreateVpcPeeringAuthorization and identify the VPC you want to peer\nwith. Once the authorization for the specified VPC is issued, you have 24 hours\nto establish the connection. These two operations handle all tasks necessary to\npeer the two VPCs, including acceptance, updating routing tables, etc. \n\nTo establish the connection, call this operation from the AWS account that is\nused to manage the Amazon GameLift fleets. Identify the following values: (1)\nThe ID of the fleet you want to be enable a VPC peering connection for; (2) The\nAWS account with the VPC that you want to peer with; and (3) The ID of the VPC\nyou want to peer with. This operation is asynchronous. If successful, a \nVpcPeeringConnection request is created. You can use continuous polling to track\nthe request's status using DescribeVpcPeeringConnections, or by monitoring fleet\nevents for success or failure using DescribeFleetEvents. \n\n *   CreateVpcPeeringAuthorization \n   \n   \n *   DescribeVpcPeeringAuthorizations \n   \n   \n *   DeleteVpcPeeringAuthorization \n   \n   \n *   CreateVpcPeeringConnection \n   \n   \n *   DescribeVpcPeeringConnections \n   \n   \n *   DeleteVpcPeeringConnection",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVpcPeeringConnection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAlias": {
            "main": "./lib/actions/DeleteAlias.js",
            "title": "DeleteAlias",
            "description": "Deletes an alias. This action removes all record of the alias. Game clients\nattempting to access a server process using the deleted alias receive an error.\nTo delete an alias, specify the alias ID to be deleted.\n\n *   CreateAlias \n   \n   \n *   ListAliases \n   \n   \n *   DescribeAlias \n   \n   \n *   UpdateAlias \n   \n   \n *   DeleteAlias \n   \n   \n *   ResolveAlias",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteBuild": {
            "main": "./lib/actions/DeleteBuild.js",
            "title": "DeleteBuild",
            "description": "Deletes a build. This action permanently deletes the build record and any\nuploaded build files.\n\nTo delete a build, specify its ID. Deleting a build does not affect the status\nof any active fleets using the build, but you can no longer create new fleets\nwith the deleted build.\n\n Learn more \n\n Working with Builds\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/build-intro.html] \n\n Related operations \n\n *   CreateBuild \n   \n   \n *   ListBuilds \n   \n   \n *   DescribeBuild \n   \n   \n *   UpdateBuild \n   \n   \n *   DeleteBuild",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteBuild.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteFleet": {
            "main": "./lib/actions/DeleteFleet.js",
            "title": "DeleteFleet",
            "description": "Deletes everything related to a fleet. Before deleting a fleet, you must set the\nfleet's desired capacity to zero. See UpdateFleetCapacity.\n\nThis action removes the fleet's resources and the fleet record. Once a fleet is\ndeleted, you can no longer use that fleet.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteFleet.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteGameSessionQueue": {
            "main": "./lib/actions/DeleteGameSessionQueue.js",
            "title": "DeleteGameSessionQueue",
            "description": "Deletes a game session queue. This action means that any \nStartGameSessionPlacement requests that reference this queue will fail. To\ndelete a queue, specify the queue name.\n\n *   CreateGameSessionQueue \n   \n   \n *   DescribeGameSessionQueues \n   \n   \n *   UpdateGameSessionQueue \n   \n   \n *   DeleteGameSessionQueue",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteGameSessionQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMatchmakingConfiguration": {
            "main": "./lib/actions/DeleteMatchmakingConfiguration.js",
            "title": "DeleteMatchmakingConfiguration",
            "description": "Permanently removes a FlexMatch matchmaking configuration. To delete, specify\nthe configuration name. A matchmaking configuration cannot be deleted if it is\nbeing used in any active matchmaking tickets.\n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMatchmakingConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMatchmakingRuleSet": {
            "main": "./lib/actions/DeleteMatchmakingRuleSet.js",
            "title": "DeleteMatchmakingRuleSet",
            "description": "Deletes an existing matchmaking rule set. To delete the rule set, provide the\nrule set name. Rule sets cannot be deleted if they are currently being used by a\nmatchmaking configuration. \n\n Learn more \n\n *   Build a Rule Set\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/match-rulesets.html] \n    \n   \n   \n\n Related operations \n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMatchmakingRuleSet.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteScalingPolicy": {
            "main": "./lib/actions/DeleteScalingPolicy.js",
            "title": "DeleteScalingPolicy",
            "description": "Deletes a fleet scaling policy. This action means that the policy is no longer\nin force and removes all record of it. To delete a scaling policy, specify both\nthe scaling policy name and the fleet ID it is associated with.\n\nTo temporarily suspend scaling policies, call StopFleetActions. This operation\nsuspends all policies for the fleet.\n\n *   DescribeFleetCapacity \n   \n   \n *   UpdateFleetCapacity \n   \n   \n *   DescribeEC2InstanceLimits \n   \n   \n *  Manage scaling policies:\n   \n    *   PutScalingPolicy (auto-scaling)\n      \n      \n    *   DescribeScalingPolicies (auto-scaling)\n      \n      \n    *   DeleteScalingPolicy (auto-scaling)\n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteScalingPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVpcPeeringAuthorization": {
            "main": "./lib/actions/DeleteVpcPeeringAuthorization.js",
            "title": "DeleteVpcPeeringAuthorization",
            "description": "Cancels a pending VPC peering authorization for the specified VPC. If the\nauthorization has already been used to create a peering connection, call \nDeleteVpcPeeringConnection to remove the connection. \n\n *   CreateVpcPeeringAuthorization \n   \n   \n *   DescribeVpcPeeringAuthorizations \n   \n   \n *   DeleteVpcPeeringAuthorization \n   \n   \n *   CreateVpcPeeringConnection \n   \n   \n *   DescribeVpcPeeringConnections \n   \n   \n *   DeleteVpcPeeringConnection",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVpcPeeringAuthorization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVpcPeeringConnection": {
            "main": "./lib/actions/DeleteVpcPeeringConnection.js",
            "title": "DeleteVpcPeeringConnection",
            "description": "Removes a VPC peering connection. To delete the connection, you must have a\nvalid authorization for the VPC peering connection that you want to delete. You\ncan check for an authorization by calling DescribeVpcPeeringAuthorizations or\nrequest a new one using CreateVpcPeeringAuthorization. \n\nOnce a valid authorization exists, call this operation from the AWS account that\nis used to manage the Amazon GameLift fleets. Identify the connection to delete\nby the connection ID and fleet ID. If successful, the connection is removed. \n\n *   CreateVpcPeeringAuthorization \n   \n   \n *   DescribeVpcPeeringAuthorizations \n   \n   \n *   DeleteVpcPeeringAuthorization \n   \n   \n *   CreateVpcPeeringConnection \n   \n   \n *   DescribeVpcPeeringConnections \n   \n   \n *   DeleteVpcPeeringConnection",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVpcPeeringConnection.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeAlias": {
            "main": "./lib/actions/DescribeAlias.js",
            "title": "DescribeAlias",
            "description": "Retrieves properties for an alias. This operation returns all alias metadata and\nsettings. To get an alias's target fleet ID only, use ResolveAlias. \n\nTo get alias properties, specify the alias ID. If successful, the requested\nalias record is returned.\n\n *   CreateAlias \n   \n   \n *   ListAliases \n   \n   \n *   DescribeAlias \n   \n   \n *   UpdateAlias \n   \n   \n *   DeleteAlias \n   \n   \n *   ResolveAlias",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeBuild": {
            "main": "./lib/actions/DescribeBuild.js",
            "title": "DescribeBuild",
            "description": "Retrieves properties for a build. To request a build record, specify a build ID.\nIf successful, an object containing the build properties is returned.\n\n Learn more \n\n Working with Builds\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/build-intro.html] \n\n Related operations \n\n *   CreateBuild \n   \n   \n *   ListBuilds \n   \n   \n *   DescribeBuild \n   \n   \n *   UpdateBuild \n   \n   \n *   DeleteBuild",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeBuild.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeEC2InstanceLimits": {
            "main": "./lib/actions/DescribeEC2InstanceLimits.js",
            "title": "DescribeEC2InstanceLimits",
            "description": "Retrieves the following information for the specified EC2 instance type:\n\n *  maximum number of instances allowed per AWS account (service limit)\n   \n   \n *  current usage level for the AWS account\n   \n   \n\nService limits vary depending on region. Available regions for Amazon GameLift\ncan be found in the AWS Management Console for Amazon GameLift (see the\ndrop-down list in the upper right corner).\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeEC2InstanceLimits.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeFleetAttributes": {
            "main": "./lib/actions/DescribeFleetAttributes.js",
            "title": "DescribeFleetAttributes",
            "description": "Retrieves fleet properties, including metadata, status, and configuration, for\none or more fleets. You can request attributes for all fleets, or specify a list\nof one or more fleet IDs. When requesting multiple fleets, use the pagination\nparameters to retrieve results as a set of sequential pages. If successful, a \nFleetAttributes object is returned for each requested fleet ID. When specifying\na list of fleet IDs, attribute objects are returned only for fleets that\ncurrently exist. \n\nSome API actions may limit the number of fleet IDs allowed in one request. If a\nrequest exceeds this limit, the request fails and the error message includes the\nmaximum allowed.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeFleetAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeFleetCapacity": {
            "main": "./lib/actions/DescribeFleetCapacity.js",
            "title": "DescribeFleetCapacity",
            "description": "Retrieves the current status of fleet capacity for one or more fleets. This\ninformation includes the number of instances that have been requested for the\nfleet and the number currently active. You can request capacity for all fleets,\nor specify a list of one or more fleet IDs. When requesting multiple fleets, use\nthe pagination parameters to retrieve results as a set of sequential pages. If\nsuccessful, a FleetCapacity object is returned for each requested fleet ID. When\nspecifying a list of fleet IDs, attribute objects are returned only for fleets\nthat currently exist. \n\nSome API actions may limit the number of fleet IDs allowed in one request. If a\nrequest exceeds this limit, the request fails and the error message includes the\nmaximum allowed.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeFleetCapacity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeFleetEvents": {
            "main": "./lib/actions/DescribeFleetEvents.js",
            "title": "DescribeFleetEvents",
            "description": "Retrieves entries from the specified fleet's event log. You can specify a time\nrange to limit the result set. Use the pagination parameters to retrieve results\nas a set of sequential pages. If successful, a collection of event log entries\nmatching the request are returned.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeFleetEvents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeFleetPortSettings": {
            "main": "./lib/actions/DescribeFleetPortSettings.js",
            "title": "DescribeFleetPortSettings",
            "description": "Retrieves the inbound connection permissions for a fleet. Connection permissions\ninclude a range of IP addresses and port settings that incoming traffic can use\nto access server processes in the fleet. To get a fleet's inbound connection\npermissions, specify a fleet ID. If successful, a collection of IpPermission \nobjects is returned for the requested fleet ID. If the requested fleet has been\ndeleted, the result set is empty.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeFleetPortSettings.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeFleetUtilization": {
            "main": "./lib/actions/DescribeFleetUtilization.js",
            "title": "DescribeFleetUtilization",
            "description": "Retrieves utilization statistics for one or more fleets. You can request\nutilization data for all fleets, or specify a list of one or more fleet IDs.\nWhen requesting multiple fleets, use the pagination parameters to retrieve\nresults as a set of sequential pages. If successful, a FleetUtilization object\nis returned for each requested fleet ID. When specifying a list of fleet IDs,\nutilization objects are returned only for fleets that currently exist. \n\nSome API actions may limit the number of fleet IDs allowed in one request. If a\nrequest exceeds this limit, the request fails and the error message includes the\nmaximum allowed.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeFleetUtilization.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeGameSessionDetails": {
            "main": "./lib/actions/DescribeGameSessionDetails.js",
            "title": "DescribeGameSessionDetails",
            "description": "Retrieves properties, including the protection policy in force, for one or more\ngame sessions. This action can be used in several ways: (1) provide a \nGameSessionId or GameSessionArn to request details for a specific game session;\n(2) provide either a FleetId or an AliasId to request properties for all game\nsessions running on a fleet. \n\nTo get game session record(s), specify just one of the following: game session\nID, fleet ID, or alias ID. You can filter this request by game session status.\nUse the pagination parameters to retrieve results as a set of sequential pages.\nIf successful, a GameSessionDetail object is returned for each session matching\nthe request.\n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeGameSessionDetails.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeGameSessionPlacement": {
            "main": "./lib/actions/DescribeGameSessionPlacement.js",
            "title": "DescribeGameSessionPlacement",
            "description": "Retrieves properties and current status of a game session placement request. To\nget game session placement details, specify the placement ID. If successful, a \nGameSessionPlacement object is returned.\n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeGameSessionPlacement.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeGameSessionQueues": {
            "main": "./lib/actions/DescribeGameSessionQueues.js",
            "title": "DescribeGameSessionQueues",
            "description": "Retrieves the properties for one or more game session queues. When requesting\nmultiple queues, use the pagination parameters to retrieve results as a set of\nsequential pages. If successful, a GameSessionQueue object is returned for each\nrequested queue. When specifying a list of queues, objects are returned only for\nqueues that currently exist in the region.\n\n *   CreateGameSessionQueue \n   \n   \n *   DescribeGameSessionQueues \n   \n   \n *   UpdateGameSessionQueue \n   \n   \n *   DeleteGameSessionQueue",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeGameSessionQueues.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeGameSessions": {
            "main": "./lib/actions/DescribeGameSessions.js",
            "title": "DescribeGameSessions",
            "description": "Retrieves a set of one or more game sessions. Request a specific game session or\nrequest all game sessions on a fleet. Alternatively, use SearchGameSessions to\nrequest a set of active game sessions that are filtered by certain criteria. To\nretrieve protection policy settings for game sessions, use \nDescribeGameSessionDetails.\n\nTo get game sessions, specify one of the following: game session ID, fleet ID,\nor alias ID. You can filter this request by game session status. Use the\npagination parameters to retrieve results as a set of sequential pages. If\nsuccessful, a GameSession object is returned for each game session matching the\nrequest.\n\n Available in Amazon GameLift Local. \n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeGameSessions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeInstances": {
            "main": "./lib/actions/DescribeInstances.js",
            "title": "DescribeInstances",
            "description": "Retrieves information about a fleet's instances, including instance IDs. Use\nthis action to get details on all instances in the fleet or get details on one\nspecific instance.\n\nTo get a specific instance, specify fleet ID and instance ID. To get all\ninstances in a fleet, specify a fleet ID only. Use the pagination parameters to\nretrieve results as a set of sequential pages. If successful, an Instance object\nis returned for each result.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeInstances.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMatchmaking": {
            "main": "./lib/actions/DescribeMatchmaking.js",
            "title": "DescribeMatchmaking",
            "description": "Retrieves one or more matchmaking tickets. Use this operation to retrieve ticket\ninformation, including status and--once a successful match is made--acquire\nconnection information for the resulting new game session. \n\nYou can use this operation to track the progress of matchmaking requests\n(through polling) as an alternative to using event notifications. See more\ndetails on tracking matchmaking requests through polling or notifications in \nStartMatchmaking. \n\nTo request matchmaking tickets, provide a list of up to 10 ticket IDs. If the\nrequest is successful, a ticket object is returned for each requested ID that\ncurrently exists.\n\n *   StartMatchmaking \n   \n   \n *   DescribeMatchmaking \n   \n   \n *   StopMatchmaking \n   \n   \n *   AcceptMatch \n   \n   \n *   StartMatchBackfill",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMatchmaking.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMatchmakingConfigurations": {
            "main": "./lib/actions/DescribeMatchmakingConfigurations.js",
            "title": "DescribeMatchmakingConfigurations",
            "description": "Retrieves the details of FlexMatch matchmaking configurations. with this\noperation, you have the following options: (1) retrieve all existing\nconfigurations, (2) provide the names of one or more configurations to retrieve,\nor (3) retrieve all configurations that use a specified rule set name. When\nrequesting multiple items, use the pagination parameters to retrieve results as\na set of sequential pages. If successful, a configuration is returned for each\nrequested name. When specifying a list of names, only configurations that\ncurrently exist are returned. \n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMatchmakingConfigurations.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMatchmakingRuleSets": {
            "main": "./lib/actions/DescribeMatchmakingRuleSets.js",
            "title": "DescribeMatchmakingRuleSets",
            "description": "Retrieves the details for FlexMatch matchmaking rule sets. You can request all\nexisting rule sets for the region, or provide a list of one or more rule set\nnames. When requesting multiple items, use the pagination parameters to retrieve\nresults as a set of sequential pages. If successful, a rule set is returned for\neach requested name. \n\n Learn more \n\n *   Build a Rule Set\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/match-rulesets.html] \n    \n   \n   \n\n Related operations \n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMatchmakingRuleSets.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribePlayerSessions": {
            "main": "./lib/actions/DescribePlayerSessions.js",
            "title": "DescribePlayerSessions",
            "description": "Retrieves properties for one or more player sessions. This action can be used in\nseveral ways: (1) provide a PlayerSessionId to request properties for a specific\nplayer session; (2) provide a GameSessionId to request properties for all player\nsessions in the specified game session; (3) provide a PlayerId to request\nproperties for all player sessions of a specified player. \n\nTo get game session record(s), specify only one of the following: a player\nsession ID, a game session ID, or a player ID. You can filter this request by\nplayer session status. Use the pagination parameters to retrieve results as a\nset of sequential pages. If successful, a PlayerSession object is returned for\neach session matching the request.\n\n Available in Amazon GameLift Local. \n\n *   CreatePlayerSession \n   \n   \n *   CreatePlayerSessions \n   \n   \n *   DescribePlayerSessions \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribePlayerSessions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeRuntimeConfiguration": {
            "main": "./lib/actions/DescribeRuntimeConfiguration.js",
            "title": "DescribeRuntimeConfiguration",
            "description": "Retrieves the current run-time configuration for the specified fleet. The\nrun-time configuration tells Amazon GameLift how to launch server processes on\ninstances in the fleet.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeRuntimeConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeScalingPolicies": {
            "main": "./lib/actions/DescribeScalingPolicies.js",
            "title": "DescribeScalingPolicies",
            "description": "Retrieves all scaling policies applied to a fleet.\n\nTo get a fleet's scaling policies, specify the fleet ID. You can filter this\nrequest by policy status, such as to retrieve only active scaling policies. Use\nthe pagination parameters to retrieve results as a set of sequential pages. If\nsuccessful, set of ScalingPolicy objects is returned for the fleet.\n\nA fleet may have all of its scaling policies suspended (StopFleetActions). This\naction does not affect the status of the scaling policies, which remains ACTIVE.\nTo see whether a fleet's scaling policies are in force or suspended, call \nDescribeFleetAttributes and check the stopped actions.\n\n *   DescribeFleetCapacity \n   \n   \n *   UpdateFleetCapacity \n   \n   \n *   DescribeEC2InstanceLimits \n   \n   \n *  Manage scaling policies:\n   \n    *   PutScalingPolicy (auto-scaling)\n      \n      \n    *   DescribeScalingPolicies (auto-scaling)\n      \n      \n    *   DeleteScalingPolicy (auto-scaling)\n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeScalingPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVpcPeeringAuthorizations": {
            "main": "./lib/actions/DescribeVpcPeeringAuthorizations.js",
            "title": "DescribeVpcPeeringAuthorizations",
            "description": "Retrieves valid VPC peering authorizations that are pending for the AWS account.\nThis operation returns all VPC peering authorizations and requests for peering.\nThis includes those initiated and received by this account. \n\n *   CreateVpcPeeringAuthorization \n   \n   \n *   DescribeVpcPeeringAuthorizations \n   \n   \n *   DeleteVpcPeeringAuthorization \n   \n   \n *   CreateVpcPeeringConnection \n   \n   \n *   DescribeVpcPeeringConnections \n   \n   \n *   DeleteVpcPeeringConnection",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVpcPeeringAuthorizations.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVpcPeeringConnections": {
            "main": "./lib/actions/DescribeVpcPeeringConnections.js",
            "title": "DescribeVpcPeeringConnections",
            "description": "Retrieves information on VPC peering connections. Use this operation to get\npeering information for all fleets or for one specific fleet ID. \n\nTo retrieve connection information, call this operation from the AWS account\nthat is used to manage the Amazon GameLift fleets. Specify a fleet ID or leave\nthe parameter empty to retrieve all connection records. If successful, the\nretrieved information includes both active and pending connections. Active\nconnections identify the IpV4 CIDR block that the VPC uses to connect. \n\n *   CreateVpcPeeringAuthorization \n   \n   \n *   DescribeVpcPeeringAuthorizations \n   \n   \n *   DeleteVpcPeeringAuthorization \n   \n   \n *   CreateVpcPeeringConnection \n   \n   \n *   DescribeVpcPeeringConnections \n   \n   \n *   DeleteVpcPeeringConnection",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVpcPeeringConnections.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetGameSessionLogUrl": {
            "main": "./lib/actions/GetGameSessionLogUrl.js",
            "title": "GetGameSessionLogUrl",
            "description": "Retrieves the location of stored game session logs for a specified game session.\nWhen a game session is terminated, Amazon GameLift automatically stores the logs\nin Amazon S3 and retains them for 14 days. Use this URL to download the logs.\n\nSee the AWS Service Limits\n[https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_gamelift] \npage for maximum log file sizes. Log files that exceed this limit are not saved.\n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetGameSessionLogUrl.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetInstanceAccess": {
            "main": "./lib/actions/GetInstanceAccess.js",
            "title": "GetInstanceAccess",
            "description": "Requests remote access to a fleet instance. Remote access is useful for\ndebugging, gathering benchmarking data, or watching activity in real time. \n\nAccess requires credentials that match the operating system of the instance. For\na Windows instance, Amazon GameLift returns a user name and password as strings\nfor use with a Windows Remote Desktop client. For a Linux instance, Amazon\nGameLift returns a user name and RSA private key, also as strings, for use with\nan SSH client. The private key must be saved in the proper format to a .pem file\nbefore using. If you're making this request using the AWS CLI, saving the secret\ncan be handled as part of the GetInstanceAccess request. (See the example later\nin this topic). For more information on remote access, see Remotely Accessing an\nInstance\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-remote-access.html]\n.\n\nTo request access to a specific instance, specify the IDs of both the instance\nand the fleet it belongs to. You can retrieve a fleet's instance IDs by calling \nDescribeInstances. If successful, an InstanceAccess object is returned\ncontaining the instance's IP address and a set of credentials.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetInstanceAccess.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAliases": {
            "main": "./lib/actions/ListAliases.js",
            "title": "ListAliases",
            "description": "Retrieves all aliases for this AWS account. You can filter the result set by\nalias name and/or routing strategy type. Use the pagination parameters to\nretrieve results in sequential pages.\n\nReturned aliases are not listed in any particular order.\n\n *   CreateAlias \n   \n   \n *   ListAliases \n   \n   \n *   DescribeAlias \n   \n   \n *   UpdateAlias \n   \n   \n *   DeleteAlias \n   \n   \n *   ResolveAlias",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAliases.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListBuilds": {
            "main": "./lib/actions/ListBuilds.js",
            "title": "ListBuilds",
            "description": "Retrieves build records for all builds associated with the AWS account in use.\nYou can limit results to builds that are in a specific status by using the \nStatus parameter. Use the pagination parameters to retrieve results in a set of\nsequential pages. \n\nBuild records are not listed in any particular order.\n\n Learn more \n\n Working with Builds\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/build-intro.html] \n\n Related operations \n\n *   CreateBuild \n   \n   \n *   ListBuilds \n   \n   \n *   DescribeBuild \n   \n   \n *   UpdateBuild \n   \n   \n *   DeleteBuild",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListBuilds.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListFleets": {
            "main": "./lib/actions/ListFleets.js",
            "title": "ListFleets",
            "description": "Retrieves a collection of fleet records for this AWS account. You can filter the\nresult set by build ID. Use the pagination parameters to retrieve results in\nsequential pages.\n\nFleet records are not listed in any particular order.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListFleets.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutScalingPolicy": {
            "main": "./lib/actions/PutScalingPolicy.js",
            "title": "PutScalingPolicy",
            "description": "Creates or updates a scaling policy for a fleet. Scaling policies are used to\nautomatically scale a fleet's hosting capacity to meet player demand. An active\nscaling policy instructs Amazon GameLift to track a fleet metric and\nautomatically change the fleet's capacity when a certain threshold is reached.\nThere are two types of scaling policies: target-based and rule-based. Use a\ntarget-based policy to quickly and efficiently manage fleet scaling; this option\nis the most commonly used. Use rule-based policies when you need to exert\nfine-grained control over auto-scaling. \n\nFleets can have multiple scaling policies of each type in force at the same\ntime; you can have one target-based policy, one or multiple rule-based scaling\npolicies, or both. We recommend caution, however, because multiple auto-scaling\npolicies can have unintended consequences.\n\nYou can temporarily suspend all scaling policies for a fleet by calling \nStopFleetActions with the fleet action AUTO_SCALING. To resume scaling policies,\ncall StartFleetActions with the same fleet action. To stop just one scaling\npolicy--or to permanently remove it, you must delete the policy with \nDeleteScalingPolicy.\n\nLearn more about how to work with auto-scaling in Set Up Fleet Automatic Scaling\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-autoscaling.html]\n.\n\n Target-based policy \n\nA target-based policy tracks a single metric: PercentAvailableGameSessions. This\nmetric tells us how much of a fleet's hosting capacity is ready to host game\nsessions but is not currently in use. This is the fleet's buffer; it measures\nthe additional player demand that the fleet could handle at current capacity.\nWith a target-based policy, you set your ideal buffer size and leave it to\nAmazon GameLift to take whatever action is needed to maintain that target. \n\nFor example, you might choose to maintain a 10% buffer for a fleet that has the\ncapacity to host 100 simultaneous game sessions. This policy tells Amazon\nGameLift to take action whenever the fleet's available capacity falls below or\nrises above 10 game sessions. Amazon GameLift will start new instances or stop\nunused instances in order to return to the 10% buffer. \n\nTo create or update a target-based policy, specify a fleet ID and name, and set\nthe policy type to \"TargetBased\". Specify the metric to track\n(PercentAvailableGameSessions) and reference a TargetConfiguration object with\nyour desired buffer value. Exclude all other parameters. On a successful\nrequest, the policy name is returned. The scaling policy is automatically in\nforce as soon as it's successfully created. If the fleet's auto-scaling actions\nare temporarily suspended, the new policy will be in force once the fleet\nactions are restarted.\n\n Rule-based policy \n\nA rule-based policy tracks specified fleet metric, sets a threshold value, and\nspecifies the type of action to initiate when triggered. With a rule-based\npolicy, you can select from several available fleet metrics. Each policy\nspecifies whether to scale up or scale down (and by how much), so you need one\npolicy for each type of action. \n\nFor example, a policy may make the following statement: \"If the percentage of\nidle instances is greater than 20% for more than 15 minutes, then reduce the\nfleet capacity by 10%.\"\n\nA policy's rule statement has the following structure:\n\nIf [MetricName] is [ComparisonOperator] [Threshold] for [EvaluationPeriods] \nminutes, then [ScalingAdjustmentType] to/by [ScalingAdjustment].\n\nTo implement the example, the rule statement would look like this:\n\nIf [PercentIdleInstances] is [GreaterThanThreshold] [20] for [15] minutes, then \n[PercentChangeInCapacity] to/by [10].\n\nTo create or update a scaling policy, specify a unique combination of name and\nfleet ID, and set the policy type to \"RuleBased\". Specify the parameter values\nfor a policy rule statement. On a successful request, the policy name is\nreturned. Scaling policies are automatically in force as soon as they're\nsuccessfully created. If the fleet's auto-scaling actions are temporarily\nsuspended, the new policy will be in force once the fleet actions are restarted.\n\n *   DescribeFleetCapacity \n   \n   \n *   UpdateFleetCapacity \n   \n   \n *   DescribeEC2InstanceLimits \n   \n   \n *  Manage scaling policies:\n   \n    *   PutScalingPolicy (auto-scaling)\n      \n      \n    *   DescribeScalingPolicies (auto-scaling)\n      \n      \n    *   DeleteScalingPolicy (auto-scaling)\n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutScalingPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RequestUploadCredentials": {
            "main": "./lib/actions/RequestUploadCredentials.js",
            "title": "RequestUploadCredentials",
            "description": "Retrieves a fresh set of credentials for use when uploading a new set of game\nbuild files to Amazon GameLift's Amazon S3. This is done as part of the build\ncreation process; see CreateBuild.\n\nTo request new credentials, specify the build ID as returned with an initial \nCreateBuild request. If successful, a new set of credentials are returned, along\nwith the S3 storage location associated with the build ID.\n\n Learn more \n\n Uploading Your Game\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-build-intro.html] \n \n\n Related operations \n\n *   CreateBuild \n   \n   \n *   ListBuilds \n   \n   \n *   DescribeBuild \n   \n   \n *   UpdateBuild \n   \n   \n *   DeleteBuild",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RequestUploadCredentials.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ResolveAlias": {
            "main": "./lib/actions/ResolveAlias.js",
            "title": "ResolveAlias",
            "description": "Retrieves the fleet ID that a specified alias is currently pointing to.\n\n *   CreateAlias \n   \n   \n *   ListAliases \n   \n   \n *   DescribeAlias \n   \n   \n *   UpdateAlias \n   \n   \n *   DeleteAlias \n   \n   \n *   ResolveAlias",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ResolveAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SearchGameSessions": {
            "main": "./lib/actions/SearchGameSessions.js",
            "title": "SearchGameSessions",
            "description": "Retrieves all active game sessions that match a set of search criteria and sorts\nthem in a specified order. You can search or sort by the following game session\nattributes:\n\n *   gameSessionId -- Unique identifier for the game session. You can use either\n   a GameSessionId or GameSessionArn value. \n   \n   \n *   gameSessionName -- Name assigned to a game session. This value is set when\n   requesting a new game session with CreateGameSession or updating with \n   UpdateGameSession. Game session names do not need to be unique to a game\n   session.\n   \n   \n *   gameSessionProperties -- Custom data defined in a game session's \n   GameProperty parameter. GameProperty values are stored as key:value pairs;\n   the filter expression must indicate the key and a string to search the data\n   values for. For example, to search for game sessions with custom data\n   containing the key:value pair \"gameMode:brawl\", specify the following: \n   gameSessionProperties.gameMode = \"brawl\". All custom data values are searched\n   as strings.\n   \n   \n *   maximumSessions -- Maximum number of player sessions allowed for a game\n   session. This value is set when requesting a new game session with \n   CreateGameSession or updating with UpdateGameSession.\n   \n   \n *   creationTimeMillis -- Value indicating when a game session was created. It\n   is expressed in Unix time as milliseconds.\n   \n   \n *   playerSessionCount -- Number of players currently connected to a game\n   session. This value changes rapidly as players join the session or drop out.\n   \n   \n *   hasAvailablePlayerSessions -- Boolean value indicating whether a game\n   session has reached its maximum number of players. It is highly recommended\n   that all search requests include this filter attribute to optimize search\n   performance and return only sessions that players can join. \n   \n   \n\nReturned values for playerSessionCount and hasAvailablePlayerSessions change\nquickly as players join sessions and others drop out. Results should be\nconsidered a snapshot in time. Be sure to refresh search results often, and\nhandle sessions that fill up before a player can join. \n\nTo search or sort, specify either a fleet ID or an alias ID, and provide a\nsearch filter expression, a sort expression, or both. If successful, a\ncollection of GameSession objects matching the request is returned. Use the\npagination parameters to retrieve results as a set of sequential pages. \n\nYou can search for game sessions one fleet at a time only. To find game sessions\nacross multiple fleets, you must search each fleet separately and combine the\nresults. This search feature finds only game sessions that are in ACTIVE status.\nTo locate games in statuses other than active, use DescribeGameSessionDetails.\n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SearchGameSessions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartFleetActions": {
            "main": "./lib/actions/StartFleetActions.js",
            "title": "StartFleetActions",
            "description": "Resumes activity on a fleet that was suspended with StopFleetActions. Currently,\nthis operation is used to restart a fleet's auto-scaling activity. \n\nTo start fleet actions, specify the fleet ID and the type of actions to restart.\nWhen auto-scaling fleet actions are restarted, Amazon GameLift once again\ninitiates scaling events as triggered by the fleet's scaling policies. If\nactions on the fleet were never stopped, this operation will have no effect. You\ncan view a fleet's stopped actions using DescribeFleetAttributes.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartFleetActions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartGameSessionPlacement": {
            "main": "./lib/actions/StartGameSessionPlacement.js",
            "title": "StartGameSessionPlacement",
            "description": "Places a request for a new game session in a queue (see CreateGameSessionQueue).\nWhen processing a placement request, Amazon GameLift searches for available\nresources on the queue's destinations, scanning each until it finds resources or\nthe placement request times out.\n\nA game session placement request can also request player sessions. When a new\ngame session is successfully created, Amazon GameLift creates a player session\nfor each player included in the request.\n\nWhen placing a game session, by default Amazon GameLift tries each fleet in the\norder they are listed in the queue configuration. Ideally, a queue's\ndestinations are listed in preference order.\n\nAlternatively, when requesting a game session with players, you can also provide\nlatency data for each player in relevant regions. Latency data indicates the\nperformance lag a player experiences when connected to a fleet in the region.\nAmazon GameLift uses latency data to reorder the list of destinations to place\nthe game session in a region with minimal lag. If latency data is provided for\nmultiple players, Amazon GameLift calculates each region's average lag for all\nplayers and reorders to get the best game play across all players. \n\nTo place a new game session request, specify the following:\n\n *  The queue name and a set of game session properties and settings\n   \n   \n *  A unique ID (such as a UUID) for the placement. You use this ID to track the\n   status of the placement request\n   \n   \n *  (Optional) A set of player data and a unique player ID for each player that\n   you are joining to the new game session (player data is optional, but if you\n   include it, you must also provide a unique ID for each player)\n   \n   \n *  Latency data for all players (if you want to optimize game play for the\n   players)\n   \n   \n\nIf successful, a new game session placement is created.\n\nTo track the status of a placement request, call DescribeGameSessionPlacement \nand check the request's status. If the status is FULFILLED, a new game session\nhas been created and a game session ARN and region are referenced. If the\nplacement request times out, you can resubmit the request or retry it with a\ndifferent queue. \n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartGameSessionPlacement.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartMatchBackfill": {
            "main": "./lib/actions/StartMatchBackfill.js",
            "title": "StartMatchBackfill",
            "description": "Finds new players to fill open slots in an existing game session. This operation\ncan be used to add players to matched games that start with fewer than the\nmaximum number of players or to replace players when they drop out. By\nbackfilling with the same matchmaker used to create the original match, you\nensure that new players meet the match criteria and maintain a consistent\nexperience throughout the game session. You can backfill a match anytime after a\ngame session has been created. \n\nTo request a match backfill, specify a unique ticket ID, the existing game\nsession's ARN, a matchmaking configuration, and a set of data that describes all\ncurrent players in the game session. If successful, a match backfill ticket is\ncreated and returned with status set to QUEUED. The ticket is placed in the\nmatchmaker's ticket pool and processed. Track the status of the ticket to\nrespond as needed. For more detail how to set up backfilling, see Backfill\nExisting Games with FlexMatch\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/match-backfill.html]\n. \n\nThe process of finding backfill matches is essentially identical to the initial\nmatchmaking process. The matchmaker searches the pool and groups tickets\ntogether to form potential matches, allowing only one backfill ticket per\npotential match. Once the a match is formed, the matchmaker creates player\nsessions for the new players. All tickets in the match are updated with the game\nsession's connection information, and the GameSession object is updated to\ninclude matchmaker data on the new players. For more detail on how match\nbackfill requests are processed, see How Amazon GameLift FlexMatch Works\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/match-intro.html]. \n\n *   StartMatchmaking \n   \n   \n *   DescribeMatchmaking \n   \n   \n *   StopMatchmaking \n   \n   \n *   AcceptMatch \n   \n   \n *   StartMatchBackfill",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartMatchBackfill.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartMatchmaking": {
            "main": "./lib/actions/StartMatchmaking.js",
            "title": "StartMatchmaking",
            "description": "Uses FlexMatch to create a game match for a group of players based on custom\nmatchmaking rules, and starts a new game for the matched players. Each\nmatchmaking request specifies the type of match to build (team configuration,\nrules for an acceptable match, etc.). The request also specifies the players to\nfind a match for and where to host the new game session for optimal performance.\nA matchmaking request might start with a single player or a group of players who\nwant to play together. FlexMatch finds additional players as needed to fill the\nmatch. Match type, rules, and the queue used to place a new game session are\ndefined in a MatchmakingConfiguration. For complete information on setting up\nand using FlexMatch, see the topic Adding FlexMatch to Your Game\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/match-intro.html].\n\nTo start matchmaking, provide a unique ticket ID, specify a matchmaking\nconfiguration, and include the players to be matched. You must also include a\nset of player attributes relevant for the matchmaking configuration. If\nsuccessful, a matchmaking ticket is returned with status set to QUEUED. Track\nthe status of the ticket to respond as needed and acquire game session\nconnection information for successfully completed matches.\n\n Tracking ticket status -- A couple of options are available for tracking the\nstatus of matchmaking requests: \n\n *  Polling -- Call DescribeMatchmaking. This operation returns the full ticket\n   object, including current status and (for completed tickets) game session\n   connection info. We recommend polling no more than once every 10 seconds.\n   \n   \n *  Notifications -- Get event notifications for changes in ticket status using\n   Amazon Simple Notification Service (SNS). Notifications are easy to set up\n   (see CreateMatchmakingConfiguration) and typically deliver match status\n   changes faster and more efficiently than polling. We recommend that you use\n   polling to back up to notifications (since delivery is not guaranteed) and\n   call DescribeMatchmaking only when notifications are not received within 30\n   seconds.\n   \n   \n\n Processing a matchmaking request -- FlexMatch handles a matchmaking request as\nfollows: \n\n 1.  Your client code submits a StartMatchmaking request for one or more players\n    and tracks the status of the request ticket. \n    \n    \n 2.  FlexMatch uses this ticket and others in process to build an acceptable\n    match. When a potential match is identified, all tickets in the proposed\n    match are advanced to the next status. \n    \n    \n 3.  If the match requires player acceptance (set in the matchmaking\n    configuration), the tickets move into status REQUIRES_ACCEPTANCE. This\n    status triggers your client code to solicit acceptance from all players in\n    every ticket involved in the match, and then call AcceptMatch for each\n    player. If any player rejects or fails to accept the match before a\n    specified timeout, the proposed match is dropped (see AcceptMatch for more\n    details).\n    \n    \n 4.  Once a match is proposed and accepted, the matchmaking tickets move into\n    status PLACING. FlexMatch locates resources for a new game session using the\n    game session queue (set in the matchmaking configuration) and creates the\n    game session based on the match data. \n    \n    \n 5.  When the match is successfully placed, the matchmaking tickets move into \n    COMPLETED status. Connection information (including game session endpoint\n    and player session) is added to the matchmaking tickets. Matched players can\n    use the connection information to join the game. \n    \n    \n\n *   StartMatchmaking \n   \n   \n *   DescribeMatchmaking \n   \n   \n *   StopMatchmaking \n   \n   \n *   AcceptMatch \n   \n   \n *   StartMatchBackfill",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartMatchmaking.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopFleetActions": {
            "main": "./lib/actions/StopFleetActions.js",
            "title": "StopFleetActions",
            "description": "Suspends activity on a fleet. Currently, this operation is used to stop a\nfleet's auto-scaling activity. It is used to temporarily stop scaling events\ntriggered by the fleet's scaling policies. The policies can be retained and\nauto-scaling activity can be restarted using StartFleetActions. You can view a\nfleet's stopped actions using DescribeFleetAttributes.\n\nTo stop fleet actions, specify the fleet ID and the type of actions to suspend.\nWhen auto-scaling fleet actions are stopped, Amazon GameLift no longer initiates\nscaling events except to maintain the fleet's desired instances setting (\nFleetCapacity. Changes to the fleet's capacity must be done manually using \nUpdateFleetCapacity. \n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopFleetActions.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopGameSessionPlacement": {
            "main": "./lib/actions/StopGameSessionPlacement.js",
            "title": "StopGameSessionPlacement",
            "description": "Cancels a game session placement that is in PENDING status. To stop a placement,\nprovide the placement ID values. If successful, the placement is moved to \nCANCELLED status.\n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopGameSessionPlacement.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StopMatchmaking": {
            "main": "./lib/actions/StopMatchmaking.js",
            "title": "StopMatchmaking",
            "description": "Cancels a matchmaking ticket that is currently being processed. To stop the\nmatchmaking operation, specify the ticket ID. If successful, work on the ticket\nis stopped, and the ticket status is changed to CANCELLED.\n\n *   StartMatchmaking \n   \n   \n *   DescribeMatchmaking \n   \n   \n *   StopMatchmaking \n   \n   \n *   AcceptMatch \n   \n   \n *   StartMatchBackfill",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StopMatchmaking.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateAlias": {
            "main": "./lib/actions/UpdateAlias.js",
            "title": "UpdateAlias",
            "description": "Updates properties for an alias. To update properties, specify the alias ID to\nbe updated and provide the information to be changed. To reassign an alias to\nanother fleet, provide an updated routing strategy. If successful, the updated\nalias record is returned.\n\n *   CreateAlias \n   \n   \n *   ListAliases \n   \n   \n *   DescribeAlias \n   \n   \n *   UpdateAlias \n   \n   \n *   DeleteAlias \n   \n   \n *   ResolveAlias",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateBuild": {
            "main": "./lib/actions/UpdateBuild.js",
            "title": "UpdateBuild",
            "description": "Updates metadata in a build record, including the build name and version. To\nupdate the metadata, specify the build ID to update and provide the new values.\nIf successful, a build object containing the updated metadata is returned.\n\n Learn more \n\n Working with Builds\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/build-intro.html] \n\n Related operations \n\n *   CreateBuild \n   \n   \n *   ListBuilds \n   \n   \n *   DescribeBuild \n   \n   \n *   UpdateBuild \n   \n   \n *   DeleteBuild",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateBuild.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateFleetAttributes": {
            "main": "./lib/actions/UpdateFleetAttributes.js",
            "title": "UpdateFleetAttributes",
            "description": "Updates fleet properties, including name and description, for a fleet. To update\nmetadata, specify the fleet ID and the property values that you want to change.\nIf successful, the fleet ID for the updated fleet is returned.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateFleetAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateFleetCapacity": {
            "main": "./lib/actions/UpdateFleetCapacity.js",
            "title": "UpdateFleetCapacity",
            "description": "Updates capacity settings for a fleet. Use this action to specify the number of\nEC2 instances (hosts) that you want this fleet to contain. Before calling this\naction, you may want to call DescribeEC2InstanceLimits to get the maximum\ncapacity based on the fleet's EC2 instance type.\n\nSpecify minimum and maximum number of instances. Amazon GameLift will not change\nfleet capacity to values fall outside of this range. This is particularly\nimportant when using auto-scaling (see PutScalingPolicy) to allow capacity to\nadjust based on player demand while imposing limits on automatic adjustments.\n\nTo update fleet capacity, specify the fleet ID and the number of instances you\nwant the fleet to host. If successful, Amazon GameLift starts or terminates\ninstances so that the fleet's active instance count matches the desired instance\ncount. You can view a fleet's current capacity information by calling \nDescribeFleetCapacity. If the desired instance count is higher than the instance\ntype's limit, the \"Limit Exceeded\" exception occurs.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateFleetCapacity.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateFleetPortSettings": {
            "main": "./lib/actions/UpdateFleetPortSettings.js",
            "title": "UpdateFleetPortSettings",
            "description": "Updates port settings for a fleet. To update settings, specify the fleet ID to\nbe updated and list the permissions you want to update. List the permissions you\nwant to add in InboundPermissionAuthorizations, and permissions you want to\nremove in InboundPermissionRevocations. Permissions to be removed must match\nexisting fleet permissions. If successful, the fleet ID for the updated fleet is\nreturned.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateFleetPortSettings.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateGameSession": {
            "main": "./lib/actions/UpdateGameSession.js",
            "title": "UpdateGameSession",
            "description": "Updates game session properties. This includes the session name, maximum player\ncount, protection policy, which controls whether or not an active game session\ncan be terminated during a scale-down event, and the player session creation\npolicy, which controls whether or not new players can join the session. To\nupdate a game session, specify the game session ID and the values you want to\nchange. If successful, an updated GameSession object is returned. \n\n *   CreateGameSession \n   \n   \n *   DescribeGameSessions \n   \n   \n *   DescribeGameSessionDetails \n   \n   \n *   SearchGameSessions \n   \n   \n *   UpdateGameSession \n   \n   \n *   GetGameSessionLogUrl \n   \n   \n *  Game session placements\n   \n    *   StartGameSessionPlacement \n      \n      \n    *   DescribeGameSessionPlacement \n      \n      \n    *   StopGameSessionPlacement",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateGameSession.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateGameSessionQueue": {
            "main": "./lib/actions/UpdateGameSessionQueue.js",
            "title": "UpdateGameSessionQueue",
            "description": "Updates settings for a game session queue, which determines how new game session\nrequests in the queue are processed. To update settings, specify the queue name\nto be updated and provide the new settings. When updating destinations, provide\na complete list of destinations. \n\n *   CreateGameSessionQueue \n   \n   \n *   DescribeGameSessionQueues \n   \n   \n *   UpdateGameSessionQueue \n   \n   \n *   DeleteGameSessionQueue",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateGameSessionQueue.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateMatchmakingConfiguration": {
            "main": "./lib/actions/UpdateMatchmakingConfiguration.js",
            "title": "UpdateMatchmakingConfiguration",
            "description": "Updates settings for a FlexMatch matchmaking configuration. To update settings,\nspecify the configuration name to be updated and provide the new settings. \n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateMatchmakingConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateRuntimeConfiguration": {
            "main": "./lib/actions/UpdateRuntimeConfiguration.js",
            "title": "UpdateRuntimeConfiguration",
            "description": "Updates the current run-time configuration for the specified fleet, which tells\nAmazon GameLift how to launch server processes on instances in the fleet. You\ncan update a fleet's run-time configuration at any time after the fleet is\ncreated; it does not need to be in an ACTIVE status.\n\nTo update run-time configuration, specify the fleet ID and provide a \nRuntimeConfiguration object with the updated collection of server process\nconfigurations.\n\nEach instance in a Amazon GameLift fleet checks regularly for an updated\nrun-time configuration and changes how it launches server processes to comply\nwith the latest version. Existing server processes are not affected by the\nupdate; they continue to run until they end, while Amazon GameLift simply adds\nnew server processes to fit the current run-time configuration. As a result, the\nrun-time configuration changes are applied gradually as existing processes shut\ndown and new processes are launched in Amazon GameLift's normal process\nrecycling activity.\n\n Learn more \n\n Working with Fleets\n[https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-intro.html].\n\n Related operations \n\n *   CreateFleet \n   \n   \n *   ListFleets \n   \n   \n *   DeleteFleet \n   \n   \n *  Describe fleets:\n   \n    *   DescribeFleetAttributes \n      \n      \n    *   DescribeFleetCapacity \n      \n      \n    *   DescribeFleetPortSettings \n      \n      \n    *   DescribeFleetUtilization \n      \n      \n    *   DescribeRuntimeConfiguration \n      \n      \n    *   DescribeEC2InstanceLimits \n      \n      \n    *   DescribeFleetEvents \n      \n      \n   \n   \n *  Update fleets:\n   \n    *   UpdateFleetAttributes \n      \n      \n    *   UpdateFleetCapacity \n      \n      \n    *   UpdateFleetPortSettings \n      \n      \n    *   UpdateRuntimeConfiguration \n      \n      \n   \n   \n *  Manage fleet actions:\n   \n    *   StartFleetActions \n      \n      \n    *   StopFleetActions",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateRuntimeConfiguration.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ValidateMatchmakingRuleSet": {
            "main": "./lib/actions/ValidateMatchmakingRuleSet.js",
            "title": "ValidateMatchmakingRuleSet",
            "description": "Validates the syntax of a matchmaking rule or rule set. This operation checks\nthat the rule set is using syntactically correct JSON and that it conforms to\nallowed property expressions. To validate syntax, provide a rule set JSON\nstring.\n\n Learn more \n\n *   Build a Rule Set\n   [https://docs.aws.amazon.com/gamelift/latest/developerguide/match-rulesets.html] \n    \n   \n   \n\n Related operations \n\n *   CreateMatchmakingConfiguration \n   \n   \n *   DescribeMatchmakingConfigurations \n   \n   \n *   UpdateMatchmakingConfiguration \n   \n   \n *   DeleteMatchmakingConfiguration \n   \n   \n *   CreateMatchmakingRuleSet \n   \n   \n *   DescribeMatchmakingRuleSets \n   \n   \n *   ValidateMatchmakingRuleSet \n   \n   \n *   DeleteMatchmakingRuleSet",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ValidateMatchmakingRuleSet.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}